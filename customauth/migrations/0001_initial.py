# Generated by Django 3.0.3 on 2020-02-22 23:42

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('username', models.CharField(help_text='The name the user logs in as.', max_length=100, unique=True, verbose_name='username')),
                ('email', models.EmailField(max_length=255, unique=True, verbose_name='email address')),
                ('first_name', models.CharField(blank=True, help_text="The user's first name.", max_length=100, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, help_text="The user's last name.", max_length=100, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='A boolean indicating if the user is allowed to access the admin site.', verbose_name='is staff')),
                ('is_superuser', models.BooleanField(default=False, help_text='A boolean indicating if the user has all permissions without them being explicitly granted.', verbose_name='is superuser')),
                ('time_created', models.DateTimeField(auto_now_add=True, help_text='The time the user was created.', verbose_name='time created')),
                ('time_updated', models.DateTimeField(auto_now=True, help_text='The time the user was last updated.', verbose_name='time updated')),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_admin', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
